using Microsoft.CodeAnalysis;
using System.Text;

namespace R3.Generator;

public class ObservableTriggerEmitter
{
    SourceProductionContext context;
    ParseResult[] result;
    StringBuilder body;

    public ObservableTriggerEmitter(SourceProductionContext context, ParseResult[] result)
    {
        this.context = context;
        this.result = result;
        this.body = new StringBuilder(1024);
    }

    public void Emit()
    {
        foreach (var parseResult in result)
        {
            body.Clear();

            var keyword = parseResult.TargetTypeSyntax.Keyword.ToString();
            var typeName = parseResult.TargetTypeSyntax.Identifier.ToString();
            var staticKey = parseResult.TargetTypeSyntax.Modifiers.Any(x => x.IsKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind.StaticKeyword)) ? "static " : "";

            body.AppendLine($"{staticKey}partial {keyword} {typeName}");
            body.AppendLine("{");
            body.AppendLine("");



            body.AppendLine("}");

            AddSource(context, parseResult.TargetTypeSymbol, body.ToString());
        }
    }

    void EmitExtensionMethods()
    {
        // emit ***AsObservable(this GameObject gameObject).
    }

    void EmitTriggerClass(ParseResult parseResult)
    {
        // emit new trigger or extend partial

        var keyword = parseResult.TargetTypeSyntax.Keyword.ToString();
        var typeName = parseResult.TargetTypeSyntax.Identifier.ToString();
        var staticKey = parseResult.TargetTypeSyntax.Modifiers.Any(x => x.IsKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind.StaticKeyword)) ? "static " : "";

        body.AppendLine($"{staticKey}partial {keyword} {typeName}");
        body.AppendLine("{");
        body.AppendLine("");

        foreach (var item in parseResult.Attributes)
        {
            // item.
            var descs = item.Kinds.GetDescription();




            if (item.DefineCoreMethod)
            {
            }
        }


        body.AppendLine("}");


    }

    static void AddSource(SourceProductionContext context, ISymbol targetSymbol, string codeBody, string fileExtension = ".g.cs")
    {
        var fullType = targetSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
          .Replace("global::", "")
          .Replace("<", "_")
          .Replace(">", "_");

        var sb = new StringBuilder();

        sb.AppendLine("""
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108
#pragma warning disable CS0162
#pragma warning disable CS0164
#pragma warning disable CS0219
#pragma warning disable CS8600
#pragma warning disable CS8601
#pragma warning disable CS8602
#pragma warning disable CS8604
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631
#pragma warning disable CS8765
#pragma warning disable CS9074
#pragma warning disable CA1050

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
""");

        var ns = targetSymbol.ContainingNamespace;
        if (!ns.IsGlobalNamespace)
        {
            sb.AppendLine($"namespace {ns} {{");
        }
        sb.AppendLine();

        sb.AppendLine(codeBody);

        if (!ns.IsGlobalNamespace)
        {
            sb.AppendLine($"}}");
        }

        var sourceCode = sb.ToString();
        context.AddSource($"{fullType}{fileExtension}", sourceCode);
    }
}
